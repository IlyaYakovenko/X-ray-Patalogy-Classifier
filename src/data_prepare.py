import pandas as pd
import os
from sklearn.model_selection import GroupShuffleSplit


DISEASES = [
    'Atelectasis', 'Consolidation', 'Infiltration', 'Pneumothorax',
    'Edema', 'Emphysema', 'Fibrosis', 'Effusion', 'Pneumonia',
    'Pleural_Thickening', 'Cardiomegaly', 'Nodule', 'Mass', 'Hernia',
    'No Finding'
]


def balance_no_finding(df, max_ratio=0.3, random_state=42):
    no_finding_mask = df['No Finding'] == 1
    pathology_mask = df['No Finding'] == 0

    no_finding_df = df[no_finding_mask]
    pathology_df = df[pathology_mask]

    print(f" –î–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:")
    print(f"  - –° –ø–∞—Ç–æ–ª–æ–≥–∏—è–º–∏: {len(pathology_df)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    print(f"  - No Finding: {len(no_finding_df)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    print(f"  - –î–æ–ª—è No Finding: {len(no_finding_df) / len(df):.2%}")

    max_no_finding = int(len(pathology_df) * max_ratio / (1 - max_ratio))

    if len(no_finding_df) > max_no_finding:
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É No Finding
        no_finding_df = no_finding_df.sample(n=max_no_finding, random_state=random_state)
        print(f"‚úì No Finding –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ: {len(no_finding_df)} –ø—Ä–∏–º–µ—Ä–æ–≤ ({max_ratio * 100}%)")
    else:
        print(f"‚úì No Finding —É–∂–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ: {len(no_finding_df)} –ø—Ä–∏–º–µ—Ä–æ–≤")

    balanced_df = pd.concat([pathology_df, no_finding_df])
    balanced_df = balanced_df.sample(frac=1, random_state=random_state)

    print(f"üìä –ü–æ—Å–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:")
    print(f"  - –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(balanced_df)}")
    print(f"  - –î–æ–ª—è No Finding: {len(no_finding_df) / len(balanced_df):.2%}")

    return balanced_df


def analyze_class_distribution(df, dataset_name):
    print(f"\n –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–õ–ê–°–°–û–í ({dataset_name}):")
    total = len(df)

    for disease in DISEASES:
        count = df[disease].sum()
        percentage = (count / total) * 100
        print(f"  {disease:<20}: {count:>5} –ø—Ä–∏–º–µ—Ä–æ–≤ ({percentage:>5.1f}%)")



def prepare_data():

    df = pd.read_csv('../data/Data_Entry_2017.csv')


    df['image_path'] = df['Image Index'].apply(lambda x: os.path.join('../data', 'images', x))


    for disease in DISEASES:
        df[disease] = df['Finding Labels'].apply(lambda x: 1 if disease in x else 0)


    with open('../data/train_val_list_NIH.txt', 'r') as f:
        train_val_names = [line.strip() for line in f]

    with open('../data/test_list_NIH.txt', 'r') as f:
        test_names = [line.strip() for line in f]


    train_val_df = df[df['Image Index'].isin(train_val_names)]
    test_df = df[df['Image Index'].isin(test_names)]


    gss = GroupShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
    train_idx, val_idx = next(gss.split(train_val_df, groups=train_val_df['Patient ID']))


    train_df = train_val_df.iloc[train_idx]
    val_df = train_val_df.iloc[val_idx]


    balanced_train_df = balance_no_finding(train_df, max_ratio=0.3)


    analyze_class_distribution(balanced_train_df, "TRAIN (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
    analyze_class_distribution(val_df, "VALIDATION (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)")
    analyze_class_distribution(test_df, "TEST (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)")


    columns_to_save = ['Image Index', 'image_path'] + DISEASES

    balanced_train_df[columns_to_save].to_csv('../data/train_labels.csv', index=False)
    val_df[columns_to_save].to_csv('../data/val_labels.csv', index=False)
    test_df[columns_to_save].to_csv('../data/test_labels.csv', index=False)


    train_patients = set(balanced_train_df['Patient ID'])
    val_patients = set(val_df['Patient ID'])
    test_patients = set(test_df['Patient ID'])

    print("\n" + "=" * 60)
    print("–î–ê–ù–ù–´–ï –ü–û–î–ì–û–¢–û–í–õ–ï–ù–´!")
    print("=" * 60)
    print(f"Train: {len(balanced_train_df)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {len(train_patients)} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    print(f"Validation: {len(val_df)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {len(val_patients)} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    print(f"Test: {len(test_df)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {len(test_patients)} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    print(f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ Train/Val: {len(train_patients.intersection(val_patients))}")
    print(f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ Train/Test: {len(train_patients.intersection(test_patients))}")
    print(f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ Val/Test: {len(val_patients.intersection(test_patients))}")


if __name__ == "__main__":
    prepare_data()
